import json
from typing import Tuple, List

from dataclasses import dataclass

@dataclass 
class Contract:
    """A contract.
    Args:
        title (str): Title of the contract.
        description (str): Description of the contract.
    """
    title: str
    description: str

    @property    
    def to_json(self):
        return json.dumps(self, default=lambda o: o.__dict__)

@dataclass 
class Orbit:
    """ Describes an orbit. 

        Args:
            apoapsis_altitude (float): Gets the apoapsis of the orbit, in meters, from the center of mass of the body being orbited.
            periapsis_altitude (float): The periapsis of the orbit, in meters, from the center of mass of the body being orbited.
    """
    apoapsis_altitude: float
    periapsis_altitude: float

    @property    
    def to_json(self):
        return json.dumps(self, default=lambda o: o.__dict__)

@dataclass
class Part:
    """ Represents an individual part. Vessels are made up of multiple parts.

        Args:
            name (str): Internal name of the part, as used in
            axially_attached (bool):  Whether the part is axially attached to its parent, i.e. on the top or bottom of its parent. If the part has no parent, returns ``False``.
            radially_attached (bool): Whether the part is radially attached to its parent, i.e. on the side of its parent. If the part has no parent, returns ``False``.
            stage (int): The stage in which this part will be activated. Returns -1 if the part is not activated by staging.
            decouple_stage (int): The stage in which this part will be decoupled. Returns -1 if the part is never decoupled from the vessel.
            mass (float): The current mass of the part, including resources it contains, in kilograms. Returns zero if the part is massless.
            dry_mass (float): The mass of the part, not including any resources it contains, in kilograms. Returns zero if the part is massless.
            dynamic_pressure (float): The dynamic pressure acting on the part, in Pascals.
            temperature (float): Temperature of the part, in Kelvin.
            skin_temperature (float): Temperature of the skin of the part, in Kelvin.
            thermal_conduction_flux (float): The rate at which heat energy is conducting into or out of the part via contact with other parts. Measured in energy per unit time, or power, in Watts. A positive value means the part is gaining heat energy, and negative means it is losing heat energy.
            thermal_convection_flux (float): The rate at which heat energy is convecting into or out of the part from the surrounding atmosphere. Measured in energy per unit time, or power, in Watts. A positive value means the part is gaining heat energy, and negative means it is losing heat energy.
            thermal_radiation_flux (float): The rate at which heat energy is radiating into or out of the part from the surrounding environment. Measured in energy per unit time, or power, in Watts. A positive value means the part is gaining heat energy, and negative means it is losing heat energy.
            thermal_internal_flux (float): The rate at which heat energy is begin generated by the part. For example, some engines generate heat by combusting fuel. Measured in energy per unit time, or power, in Watts. A positive value means the part is gaining heat energy, and negative means it is losing heat energy.
    """
    name: str                     
    axially_attached: bool
    radially_attached: bool
    stage: int
    decouple_stage: int
    mass: float
    dry_mass: float
    dynamic_pressure: float
    temperature: float
    skin_temperature: float
    thermal_conduction_flux: float
    thermal_convection_flux: float
    thermal_radiation_flux: float
    thermal_internal_flux: float

    @property    
    def to_json(self):
        return json.dumps(self, default=lambda o: o.__dict__)

@dataclass
class Resource:
    """ An individual resource stored within a part. 

    Args:
        name (str): The name of the resource.
        amount (float): The amount of the resource that is currently stored in the part.
        max (float): The total amount of the resource that can be stored in the part.
        density (float): The density of the resource, in kg/l.
    """
    name: str
    amount: float
    max: float
    density: float

    @property    
    def to_json(self):
        return json.dumps(self, default=lambda o: o.__dict__)

@dataclass
class Parts: 
    """Instances of this class are used to setting with the parts of a vessel.

    Args:
        resources (List[Resource]): Represents the collection of resources stored in a vessel, stage or part. 
        parts (List[Part]): A list of all of the vessels parts.
        ut (float): The current universal time in seconds.
    """      
    resources: List[Resource]
    parts: List[Part]
    ut: float

    @property
    def to_json(self):
        return json.dumps(self, default=lambda o: o.__dict__)

@dataclass
class Nav(object):  
    """These objects are used to setting orbital and flight data.

    Args:
        apoapsis_altitude (float): Gets the apoapsis of the orbit, in meters, from the center of mass of the body being orbited.
        periapsis_altitude (float): The periapsis of the orbit, in meters, from the center of mass of the body being orbited.
        mean_altitude (float): The altitude above sea level, in meters. Measured from the center of mass of the vessel.
        g_force (float): The current G force acting on the vessel in g.
        rotation (Tuple[float, float, float, float]): The rotation of the vessel, The rotation as a quaternion of the form (x,y,z,w).
        direction (Tuple[float, float, float]):The direction that the vessel is pointing in, The direction as a unit vector.
        normal (Tuple[float, float, float]):The direction normal to the vessels orbit, The direction as a unit vector.
        anti_normal (Tuple[float, float, float]): The direction opposite to the normal of the vessels orbit,The direction as a unit vector.
        radial (Tuple[float, float, float]): The radial direction of the vessels orbit,The direction as a unit vector.
        anti_radial (Tuple[float, float, float]): The direction opposite to the radial direction of the vessels orbit,The direction as a unit vector.
        atmosphere_density (float): The current density of the atmosphere around the vessel, in kg/m3.
        dynamic_pressure (float): The dynamic pressure acting on the vessel, in Pascals. This is a measure of the strength of the aerodynamic forces. It is equal to 1/2.air density.velocity2. It is commonly denoted Q.
        static_pressure (float): The static atmospheric pressure acting on the vessel, in Pascals.
        aerodynamic_force (Tuple[float, float, float]): The total aerodynamic forces acting on the vessel, A vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.
        drag (Tuple[float, float, float]): The aerodynamic drag currently acting on the vessel. A vector pointing in the direction of the force, with its magnitude equal to the strength of the force in Newtons.
        lift (Tuple[float, float, float]): The aerodynamic lift currently acting on the vessel. A vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.
        ut (float): The current universal time in seconds.
    """        
    apoapsis_altitude: float
    periapsis_altitude: float
    mean_altitude: float
    g_force: float
    rotation: Tuple[float, float, float, float]
    direction: Tuple[float, float, float]
    normal: Tuple[float, float, float]
    anti_normal: Tuple[float, float, float]
    radial: Tuple[float, float, float]
    anti_radial: Tuple[float, float, float]
    atmosphere_density: float
    dynamic_pressure: float
    static_pressure: float
    aerodynamic_force: Tuple[float, float, float]
    drag: Tuple[float, float, float]
    lift: Tuple[float, float, float]
    ut: float

    @property    
    def to_json(self):
        return json.dumps(self, default=lambda o: o.__dict__)

@dataclass
class Mission:
    '''
    All mission parameters are stored in a single object to easily
    pass around
    '''
    max_auto_stage :int = 0
    orbit_alt :int = 80000
    grav_turn_finish:int = 55000
    inclination:int = 0
    force_roll:bool = True
    roll:float = 90
    deploy_solar:bool = True
    max_q:int = 20000

    @property    
    def to_json(self):
        return json.dumps(self, default=lambda o: o.__dict__)

@dataclass
class FlightPlan(object):
    """Create a Flight Plan.
    """
    # pre_launch
    heading:int=90
    # launch
    altitude:int=80000
    # Orbit
    apoapsis:int=100000
    periapsis:int=100000
    # deorbit
    periapsis:int=45000
    end_altitude:int=4000
    # Land
    chute_altitude:int=3000

    @property    
    def to_json(self):
        return json.dumps(self, default=lambda o: o.__dict__)